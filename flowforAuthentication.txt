         ┌──────────────┐
         │ 1. Register  │
         └─────┬────────┘
               │
               ▼
      ┌─────────────────────┐
      │ User sends username │
      │  and password       │
      └────────┬────────────┘
               │
               ▼
 ┌──────────────────────────────┐
 │ Backend hashes the password  │
 │ using bcrypt (passlib)       │
 └────────┬─────────────────────┘
          │
          ▼
 ┌──────────────────────────────┐
 │ Save user with hashed pass   │
 │ in database (using ORM)      │
 └──────────────────────────────┘





         ┌─────────────┐
         │ 2. Login    │
         └────┬────────┘
              │
              ▼
  ┌──────────────────────────────┐
  │ User sends username & pass   │
  └────────────┬─────────────────┘
               │
               ▼
 ┌──────────────────────────────┐
 │ Backend fetches user from DB │
 └────────────┬─────────────────┘
              │
              ▼
 ┌──────────────────────────────┐
 │ Verify password using bcrypt │
 └────────────┬─────────────────┘
              │
              ▼
 ┌──────────────────────────────┐
 │ If correct: Generate JWT     │
 │ (signed token with expiry)   │
 └────────────┬─────────────────┘
              │
              ▼
   ┌────────────────────────────┐
   │ Send token back to client  │
   └────────────────────────────┘


     ┌──────────────────────────────┐
     │ 3. Accessing Protected Routes│
     └────────────┬─────────────────┘
                  │
                  ▼
     ┌──────────────────────────────┐
     │ User sends JWT in headers    │
     │ Authorization: Bearer <JWT>  │
     └────────────┬─────────────────┘
                  │
                  ▼
     ┌──────────────────────────────┐
     │ Backend verifies JWT         │
     │ and gets user info from it   │
     └────────────┬─────────────────┘
                  │
                  ▼
        ┌────────────────────┐
        │ Access is granted  │
        └────────────────────┘
